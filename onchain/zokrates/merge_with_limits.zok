import "hashes/sha256/1024bitPadded" as sha1024Padded
import "hashes/sha256/512bitPadded" as sha512Padded
import "hashes/sha256/512bit" as sha512
import "hashes/sha256/256bitPadded" as sha256Padded

const u32[8] merge_root= [
    0x660a8ac4,0x231b0993,0x433273c2,0x1f5686e0,
    0xcda230e8,0x843dfce6,0xc39eaa67,0xb1171f18
]

const u32[7] card_limit_indexes = [40,26,19,10,5,2,1]
const u32[7] card_limits = [1551,1111,555,212,111,101,11]

// 0 - if hash1 < hash2
// 1 - if hash1 == hash2
// 2 - if hash1 > hash2
// TODO: try making this function use the convert library and then check equality (see if smaller)
def compareHash(u32[8] hash1, u32[8] hash2) -> u8:
    u8 result = 1
    for u32 i in 0..8 do
        result = if hash1[7-i] == hash2[7-i] then result else if hash1[7-i] < hash2[7-i] then 0 else 2 fi fi
    endfor
    return result

def makeCard(u32 cardID) -> u32[8]:
    u32[3] cardID_digits = [0x00000000, cardID/10, cardID-(cardID/10)*10]
    u32[8] card_template = [0x63617264,0x20233030,0x30800000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000]
    u32[8] dummyblock = [0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000048]
    card_template[1] = card_template[1] + cardID_digits[0]*0x00000100 + cardID_digits[1]
    card_template[2] = card_template[2] + cardID_digits[2]*0x01000000
    return sha512(card_template, dummyblock)

def verifyProofDepth3(u32[3][8] proof, u32[8] leaf, u32[8] root) -> bool:
    u32[8] proofHash = leaf
    for u32 i in 0..3 do
        proofHash = if compareHash(proofHash, proof[i]) == 0 then sha512Padded(proofHash, proof[i]) else sha512Padded(proof[i], proofHash) fi
    endfor
    return if compareHash(proofHash, root) == 1 then true else false fi

def verifyMerge(u32[11][8] merge_proof, u32[2] input_cards_IDs, u32[3] result_cards_IDs) -> bool:
    // merge leaf consists of the two input cards, followed by 4 outputs (if the output is nothing it is 0xFFFFFFFF)
    u32[8] merge_leaf = [...input_cards_IDs, ...result_cards_IDs, 0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF]

    u32[8] proofHash = sha256Padded(merge_leaf)
    for u32 i in 0..11 do // change to u8??
        proofHash = if compareHash(proofHash, merge_proof[i]) == 0 then sha512Padded(proofHash, merge_proof[i]) else sha512Padded(merge_proof[i], proofHash) fi
    endfor
    return if compareHash(proofHash, merge_root) == 1 then true else false fi

def getCardLimitIndex(u32 cardID) -> u32:
    u32 card_limit_index = -1
    for u32 i in 0..7 do
        card_limit_index = if cardID <= card_limit_indexes[i] then i else card_limit_index fi
    endfor
    return card_limits[card_limit_index]

def getCardCount(u32 cardID,u32 cardCountBlock) -> u32:
    return if cardID%2==1 then cardCountBlock >> 16 else cardCountBlock  & 0x00001111 fi

def main(private u32[2] input_cards_IDs, private u32[2][3][8] input_cards_path, u32[2][8] input_cards_roots, private u32[11][8] merge_proof, private u32[3] result_cards_IDs, private u32[3][3][8] result_cards_paths, u32[3][8] result_cards_roots, u32[8] cards_minted_hash, private u32[32] cards_minted_preimage) -> u32[8]: // change this to card1_ID
    // assert that the card IDs belong to the merkle roots for all cards inputted
    // for u8 i in 0..2 do
    //     assert(verifyProofDepth3(input_cards_path[i],makeCard(input_cards_IDs[i]),input_cards_roots[i]))
    // endfor
    //
    // assert(verifyMerge(merge_proof, input_cards_IDs, result_cards_IDs))

    // when the merge leaf has 0xFFFFFFFF then there is no card in that slot and thus nothing to mint there
    // bool[4] result_cards_indicator = [true, true, true, true]
    // for u8 i in 0..4 do
    //     result_cards_indicator[i] = if input_cards_IDs[i] == 0xFFFFFFFF then false else true
    // endfor

    // if card is there for minting, then ensure the resulting card number belongs to the merkle root that will be minted
    // for u8 i in 0..4 do
    //     assert(result_cards_indicator[i] || verifyProofDepth3(result_cards_paths[i],makeCard(result_cards_IDs[i]),result_cards_roots[i]))
    // endfor

    // TODO: can make this smaller by just returning the hash and then checking on chain if the values are equal (cards minted prehash equals what we return) ... can actually do this for all public inputs
    // assert the preimage is correct
    assert(compareHash(sha1024Padded(cards_minted_preimage[0..8],cards_minted_preimage[8..16],cards_minted_preimage[16..24],cards_minted_preimage[24..32]),cards_minted_hash)==1)

    for u32 i in 0..2 do
        // assert that the card IDs belong to the merkle roots for all cards inputted
        assert(verifyProofDepth3(input_cards_path[i],makeCard(input_cards_IDs[i]),input_cards_roots[i]))
        // burn the cards passed in (decrease the amount of card type unless its one that doesn't get burned (base cards or garbage card)):
        // make sure there is at least 1 card in existence if it is being used in proof (just to make sure something hasn't gone wrong)
        // burning doesn't decrease the copy count anymore
        // assert(getCardCount(result_cards_IDs[i],cards_minted_preimage[result_cards_IDs[i]/2]) > 0)
        // cards_minted_preimage[input_cards_IDs[i]/2] = cards_minted_preimage[input_cards_IDs[i]/2] - if input_cards_IDs[i] > card_limit_indexes[0] then 0 else (if input_cards_IDs[i]%2==1 then 0x00010000 else 1 fi) fi
    endfor

    // assert the input cards and output cards are correct for the merge
    assert(verifyMerge(merge_proof, input_cards_IDs, result_cards_IDs))

    // mint the cards passed in (increase the amount of card type):
    for u32 i in 0..3 do
        bool limit_reached = getCardCount(result_cards_IDs[i],cards_minted_preimage[result_cards_IDs[i]/2]) >= getCardLimitIndex(result_cards_IDs[i])
        result_cards_IDs[i] = if limit_reached then 50 else result_cards_IDs[i] fi
        // add one to the current card count if the limit hasn't been reached (if the limit was reached do nothing bc card 50 has no limit
        cards_minted_preimage[result_cards_IDs[i]/2] = cards_minted_preimage[result_cards_IDs[i]/2] + if result_cards_IDs[i] > card_limit_indexes[0] then 0 else (if result_cards_IDs[i]%2==1 then 0x00010000 else 1 fi) fi

        // ensure the resulting card number belongs to the merkle root that will be minted (whether that be a merkle root for garbage card 50 or the card that should be minted if no limit reached)
        assert(verifyProofDepth3(result_cards_paths[i],makeCard(result_cards_IDs[i]),result_cards_roots[i]))
    endfor
    // the following line is to ensure the hash for the card limits changes every time
    // this way the user wont know if a merge is succesful or not until after they spend merge token
    cards_minted_preimage[31] = cards_minted_preimage[31] + 1 // alternatively add an amount thats also secret?
    return sha1024Padded(cards_minted_preimage[0..8],cards_minted_preimage[8..16],cards_minted_preimage[16..24],cards_minted_preimage[24..32])